---
title: General Feats
layout: layouts/sidebar.njk
---

<div class="stack">
  <h2>General Feats</h2>
  <p>
    As you level up, you can choose to take class feats or general feats. Below
    are the general feats that you can choose. You can choose each feat only
    once, and you must meet the level requirements to take them.
  </p>

  {% for feat in feats %}
    <div>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ feat.Name }}
        </h4>
        <p>
          <small>
            Level {{ feat.Level }}
          </small>
        </p>
        <p>
          {{ feat.Description }}
        </p>
        <div>
          <button type="button" class="small" data-add-feat data-level="{{ feat.Level }}" data-name="{{ feat.Name }}" data-description="{{ feat.Description }}" hidden>
            Take This Feat
          </button>
        </div>
      </div>
    </div>
  {% endfor %}

  <div data-class-links hidden>
    <h3>Feats From Other Classes</h3>
    <ul class="list-style:none">
      {% for class in classes %}
        <li>
          <a href="/classes/{{ class.slug }}">
            {{ class.Name }}
          </a>
        </li>
      {% endfor %}
    </ul>
</div>

<script type="module">
  import { getFromDb, addToDb } from '/scripts/db.mjs';

  let character;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      return;
    }

    const classLinksWrapper = document.querySelector('[data-class-links]');
    const classLinks = document.querySelectorAll('[data-class-links] a');
    classLinks.forEach((link) => {
      link.href += `?key=${key}`;
    });
    classLinksWrapper.removeAttribute('hidden');

    character = await getFromDb('characters', key);
    const selectableFeats = document.querySelectorAll(`[data-add-feat]`);
    selectableFeats.forEach((feat) => {
      const level = Number(feat.dataset.level);
      if (level <= character.level) {
        feat.removeAttribute('hidden');
      }
    });
  };

  const addFeat = async (feat) => {
    try {
      await addToDb('feats', feat);
    } catch (error) {
      console.error(error);
    }
  };

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-add-feat]')) {
      const feat = {
        owner: character.key,
        type: 'general',
        name: event.target.dataset.name,
        level: event.target.dataset.level,
        description: event.target.dataset.description,
      };

      if (feat.name === 'Charm Boost' || feat.name === 'Expert Charm') {
        character.charm += 1;
        await updateCharacter(character);
      }

      if (feat.name === 'Cool Boost' || feat.name === 'Expert Cool') {
        character.cool += 1;
        await updateCharacter(character);
      }

      if (feat.name === 'Sharp Boost' || feat.name === 'Expert Sharp') {
        character.sharp += 1;
        await updateCharacter(character);
      }

      if (feat.name === 'Tough Boost' || feat.name === 'Expert Tough') {
        character.tough += 1;
        await updateCharacter(character);
      }

      if (feat.name === 'Technobabble Boost' || feat.name === 'Expert Technobabble') {
        character.technobabble += 1;
        await updateCharacter(character);
      }

      if (feat.name === 'Lucky Break') {
        character.luck += 1;
        await updateCharacter(character);
      }

      await addFeat(feat);
    }
  });

  document.addEventListener('item-added', (event) => {
    if (event.detail !== character.key) {
      window.location.href = `/character-sheets/character?key=${character.key}`;
    }
  });

  getCharacter();
</script>
