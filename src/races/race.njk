---
layout: layouts/sidebar.njk
pagination:
  data: races
  size: 1
  alias: race
permalink: races/{{ race.slug }}/index.html
renderData:
  title: "{{ race.Name }}"
---

<div class="stack">
  <h2>
    {{ race.Name }}
  </h2>
  <p>
    {{ race.Description }}
  </p>

  <h3>
    Feats
  </h3>
  <p>
    As you level up, you can choose to take race feats, class feats, or
    <a href="/feats">general feats</a>. Below are the race feats for the
    {{ race.Name }} race.
  </p>

  {% for feat in race.feats %}
    <div>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ feat.Name }}
        </h4>
        <p>
          <small>
            Level {{ feat.Level }}
          </small>
        </p>
        <p>
          {{ feat.Description }}
        </p>
        <div>
          <button type="button" class="small" data-toggle-feat data-id="{{ feat.id }}" data-race="{{ race.Name }}" data-level="{{ feat.Level }}" hidden>
            Take This Feat
          </button>
        </div>
      </div>
    </div>
  {% endfor %}
</div>

<script type="module">
  import { getFromDb, addToDb } from '/scripts/db.mjs';

  let character;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      return;
    }

    character = await getFromDb('characters', key);
    const selectableFeats = document.querySelectorAll(`[data-race="${character.race}"]`);
    selectableFeats.forEach((feat) => {
      const level = Number(feat.dataset.level);
      const id = feat.dataset.id;
      if (level <= character.level) {
        feat.removeAttribute('hidden');
        if (character.feats && character.feats.length && character.feats.includes(id)) {
          feat.textContent = 'Remove This Feat';
          feat.setAttribute('data-is-taken', true);
        } else {
          feat.textContent = 'Take This Feat';
          feat.removeAttribute('data-is-taken');
        }
      }
    });
  };

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  document.addEventListener('click', (event) => {
    if (event.target.matches('[data-toggle-feat]')) {
      const id = event.target.dataset.id;
      const isTaken = !!event.target.dataset.isTaken;

      if (isTaken) {
        const index = character.feats.findIndex(feat => feat === id);
        character.feats.splice(index, 1);
      } else {
        if (!character.feats) {
          character.feats = [id];
        } else {
          character.feats.push(id);
        }
      }

      updateCharacter(character);
    }
  });

  document.addEventListener('item-added', () => {
    getCharacter();
  });

  getCharacter();
</script>
