---
title: Select Feats
layout: layouts/sidebar.njk
---

<div class="stack margin-block-end:3rem">
  <h2>
    Select Feats
    <span data-character-name></span>
  </h2>
  <p>
    These are all the feats that you should be able to take, given your race,
    class, and level. If you take a generalist feat that gives you access to
    other class feats, you can toggle those to appear as well.
  </p>
  <p data-initial-description>
    As a level 1 character, you start with one feat. Choose one and then you'll
    be able to view your full character sheet.
  </p>
  <div>
    <input id="toggleClassFeats" type="checkbox">
    <label for="toggleClassFeats">Show All Class Feats</label>
  </div>
  {% for feat in allFeats %}
    <div data-feat data-id="{{ feat.id }}" data-race="{{ feat.race }}" data-feat-class="{{ feat.class }}" data-level="{{ feat.Level }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ feat.Name }}
        </h4>
        <p>
          <small>
            Level {{ feat.Level }}, {{ feat.type }}
          </small>
        </p>
        <p>
          {{ feat.Description }}
        </p>
        <div>
          <button type="button" class="small" data-toggle-feat data-id="{{ feat.id }}" data-name="{{ feat.Name }}">
            Take This Feat
          </button>
        </div>
      </div>
    </div>
  {% endfor %}
  <div data-back-link></div>
</div>

<script>
  if (document.referrer.includes('/character-sheets/character')) {
    const initialDescription = document.querySelectorAll('[data-initial-description]');
    initialDescription.forEach((node) => {
      node.setAttribute('hidden', true);
    });
  }
</script>
<script type="module">
  import { getFromDb, addToDb } from '/scripts/db.mjs';

  let character;
  let hasChosenFeat = false;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      return;
    }

    character = await getFromDb('characters', key);

    const heading = document.querySelector('[data-character-name]');
    heading.innerHTML = `â€“ ${character.name}`;

    const featElements = document.querySelectorAll('[data-feat]');
    featElements.forEach((feat) => {
      const { id, race, featClass, level } = feat.dataset;
      if (race && race !== character.race) {
        return;
      }

      if (featClass && !featClass.includes(character.class)) {
        return;
      }

      if (character.level < Number(level)) {
        return;
      }

      feat.removeAttribute('hidden');
      const featButton = feat.querySelector('[data-toggle-feat]');
      if (character.feats && character.feats.length && character.feats.includes(id)) {
        featButton.textContent = 'Remove This Feat';
        featButton.setAttribute('data-is-taken', true);
      } else {
        featButton.textContent = 'Take This Feat';
        featButton.removeAttribute('data-is-taken');
      }
    });
  };

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  document.addEventListener('change', (event) => {
    if (event.target.matches('#toggleClassFeats')) {
      const featElements = document.querySelectorAll('[data-feat]');
      featElements.forEach((feat) => {
        const { id, race, featClass, level } = feat.dataset;
        if (race && race !== character.race) {
          return;
        }

        if (!event.target.checked) {
          if (featClass && !featClass.includes(character.class)) {
            feat.setAttribute('hidden', '');
            return;
          }
        }

        if (character.level < Number(level)) {
          return;
        }

        feat.removeAttribute('hidden');
        const featButton = feat.querySelector('[data-toggle-feat]');
        if (character.feats && character.feats.length && character.feats.includes(id)) {
          featButton.textContent = 'Remove This Feat';
          featButton.setAttribute('data-is-taken', true);
        } else {
          featButton.textContent = 'Take This Feat';
          featButton.removeAttribute('data-is-taken');
        }
      });
    }
  });

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-toggle-feat]')) {
      const id = event.target.dataset.id;
      const isTaken = !!event.target.dataset.isTaken;
      const name = event.target.dataset.name;

      if (isTaken) {
        const index = character.feats.findIndex(feat => feat === id);
        character.feats.splice(index, 1);
      } else {
        if (!character.feats) {
          character.feats = [id];
        } else {
          character.feats.push(id);
        }
      }

      if (name === 'Charm Boost' || name === 'Expert Charm') {
        if (isTaken) {
          character.charm -= 1;
        } else {
          character.charm += 1;
        }
      }

      if (name === 'Cool Boost' || name === 'Expert Cool') {
        if (isTaken) {
          character.cool -= 1;
        } else {
          character.cool += 1;
        }
      }

      if (name === 'Sharp Boost' || name === 'Expert Sharp') {
        if (isTaken) {
          character.sharp -= 1;
        } else {
          character.sharp += 1;
        }
      }

      if (name === 'Tough Boost' || name === 'Expert Tough') {
        if (isTaken) {
          character.tough -= 1;
        } else {
          character.tough += 1;
        }
      }

      if (name === 'Technobabble Boost' || name === 'Expert Technobabble') {
        if (isTaken) {
          character.technobabble -= 1;
        } else {
          character.technobabble += 1;
        }
      }

      if (name === 'Lucky Break') {
        if (isTaken) {
          character.luck -= 1;
        } else {
          character.luck += 1;
        }
      }

      await updateCharacter(character);
    }
  });

  document.addEventListener('item-added', () => {
    if (!hasChosenFeat) {
      hasChosenFeat = true;
      const backLinkTemplate = `
        <a href="/character-sheets/character?key=${character.key}" class="button fixed-block-inline-end">
          Go to Character Sheet
        </a>
      `;
      const backLinkWrapper = document.querySelector('[data-back-link]');
      backLinkWrapper.innerHTML = backLinkTemplate;
    }

    getCharacter();
  });

  getCharacter();
</script>
