---
title: Finalize Stats
layout: layouts/sidebar.njk
---

<style>
  .stat-bubble {
    display: inline-block;
    margin-inline-end: 0.5rem;
    border: 1px solid var(--text-color);
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    text-align: center;
    line-height: 1.5;
  }
</style>

<div class="stack">
  <h2 data-heading>
    Finalize Stats
  </h2>
  <p data-initial-description>
    If your primary, secondary, or penalty stats are predefined by your class,
    those numbers should be autofilled for you. If you have a choice in stats,
    you will need to set your chosen stat to either 1 or -1. Remember that you
    have an additional +1 boost and a -1 penalty that you can assign to any of
    these stats as well.
  </p>
  <div data-initial-description>
    {% for class in classes %}
      <ul class="list-style:none" data-class="{{ class.Name }}" hidden>
        <li data-primary-stat="{{ class['Primary Stat'] }}">
          Primary Stat: {{ class['Primary Stat'] }}
        </li>
        <li data-secondary-stat="{{ class['Secondary Stat'] }}">
          Secondary Stat: {{ class['Secondary Stat'] }}
        </li>
        <li data-penalty-stat="{{ class['Penalty'] }}">
          Penalty Stat: {{ class['Penalty'] }}
        </li>
      </ul>
    {% endfor %}
  </div>
  <form id="finalizeStatsForm" class="stack">
    <div>
      <p class="h4">
        <span class="stat-bubble" data-charm>
          0
        </span>
        Charm
      </p>
      <div class="cluster margin-block-start:halfrem">
        <div>
          <button type="button" class="small" data-alter-stat data-type="penalty" data-stat="charm">
            -1 Penalty
          </button>
          <button type="button" class="small" data-alter-stat data-type="boost" data-stat="charm">
            +1 Boost
          </button>
        </div>
      </div>
    </div>
    <div>
      <p class="h4">
        <span class="stat-bubble" data-cool>
          0
        </span>
        Cool
      </p>
      <div class="cluster margin-block-start:halfrem">
        <div>
          <button type="button" class="small" data-alter-stat data-type="penalty" data-stat="cool">
            -1 Penalty
          </button>
          <button type="button" class="small" data-alter-stat data-type="boost" data-stat="cool">
            +1 Boost
          </button>
        </div>
      </div>
    </div>
    <div>
      <p class="h4">
        <span class="stat-bubble" data-sharp>
          0
        </span>
        Sharp
      </p>
      <div class="cluster margin-block-start:halfrem">
        <div>
          <button type="button" class="small" data-alter-stat data-type="penalty" data-stat="sharp">
            -1 Penalty
          </button>
          <button type="button" class="small" data-alter-stat data-type="boost" data-stat="sharp">
            +1 Boost
          </button>
        </div>
      </div>
    </div>
    <div>
      <p class="h4">
        <span class="stat-bubble" data-tough>
          0
        </span>
        Tough
      </p>
      <div class="cluster margin-block-start:halfrem">
        <div>
          <button type="button" class="small" data-alter-stat data-type="penalty" data-stat="tough">
            -1 Penalty
          </button>
          <button type="button" class="small" data-alter-stat data-type="boost" data-stat="tough">
            +1 Boost
          </button>
        </div>
      </div>
    </div>
    <div>
      <p class="h4">
        <span class="stat-bubble" data-technobabble>
          0
        </span>
        Technobabble
      </p>
      <div class="cluster margin-block-start:halfrem">
        <div>
          <button type="button" class="small" data-alter-stat data-type="penalty" data-stat="technobabble">
            -1 Penalty
          </button>
          <button type="button" class="small" data-alter-stat data-type="boost" data-stat="technobabble">
            +1 Boost
          </button>
        </div>
      </div>
    </div>
    <div>
      <input id="charm" type="hidden" name="charm" value="0">
      <input id="cool" type="hidden" name="cool" value="0">
      <input id="sharp" type="hidden" name="sharp" value="0">
      <input id="tough" type="hidden" name="tough" value="0">
      <input id="technobabble" type="hidden" name="technobabble" value="0">
    </div>
    <div>
      <button type="submit" data-submit-button>
        Save and Finish
      </button>
    </div>
  </form>
</div>

<script>
  if (document.referrer.includes('/character-sheets/character')) {
    const initialDescription = document.querySelectorAll('[data-initial-description]');
    initialDescription.forEach((node) => {
      node.setAttribute('hidden', true);
    });
  }
</script>
<script type="module">
  import { getFromDb, addToDb } from '/scripts/db.mjs';

  let character;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      window.location.href = '/character-sheets/add-character';
    }

    character = await getFromDb('characters', key);

    const charmInput = document.querySelector(`#charm`);
    const charmIndicator = document.querySelector(`[data-charm]`);

    const coolInput = document.querySelector(`#cool`);
    const coolIndicator = document.querySelector(`[data-cool]`);

    const sharpInput = document.querySelector(`#sharp`);
    const sharpIndicator = document.querySelector(`[data-sharp]`);

    const toughInput = document.querySelector(`#tough`);
    const toughIndicator = document.querySelector(`[data-tough]`);

    const technobabbleInput = document.querySelector(`#technobabble`);
    const technobabbleIndicator = document.querySelector(`[data-technobabble]`);

    const heading = document.querySelector('[data-heading]');

    if (document.referrer.includes('/character-sheets/character')) {
      charmInput.value = character.charm;
      charmIndicator.innerHTML = `${character.charm}`;

      coolInput.value = character.cool;
      coolIndicator.innerHTML = `${character.cool}`;

      sharpInput.value = character.sharp;
      sharpIndicator.innerHTML = `${character.sharp}`;

      toughInput.value = character.tough;
      toughIndicator.innerHTML = `${character.tough}`;

      technobabbleInput.value = character.technobabble;
      technobabbleIndicator.innerHTML = `${character.technobabble}`;

      heading.innerHTML = `Change Stats – ${character.name}`;
      const submitButton = document.querySelector('[data-submit-button]');
      submitButton.innerHTML = 'Save Changes';
    } else {
      heading.innerHTML = `Finalize Stats – ${character.name}`;
      const classStatsElement = document.querySelector(`[data-class="${character.class}"]`);
      classStatsElement.removeAttribute('hidden');

      const primaryStatElement = document.querySelector(`[data-class="${character.class}"] [data-primary-stat]`);
      const primaryStat = primaryStatElement.dataset.primaryStat;

      const secondaryStatElement = document.querySelector(`[data-class="${character.class}"] [data-secondary-stat]`);
      const secondaryStat = secondaryStatElement.dataset.secondaryStat;

      const penaltyStatElement = document.querySelector(`[data-class="${character.class}"] [data-penalty-stat]`);
      const penaltyStat = penaltyStatElement.dataset.penaltyStat;

      switch (primaryStat) {
        case 'Charm':
          charmInput.value = 1;
          charmIndicator.innerHTML = '1';
          break;
        case 'Cool':
          coolInput.value = 1;
          coolIndicator.innerHTML = '1';
          break;
        case 'Sharp':
          sharpInput.value = 1;
          sharpIndicator.innerHTML = '1';
          break;
        case 'Tough':
          toughInput.value = 1;
          toughIndicator.innerHTML = '1';
          break;
        case 'Technobabble':
          technobabbleInput.value = 1;
          technobabbleIndicator.innerHTML = '1';
          break;
        default:
          break;
      }

      switch (secondaryStat) {
        case 'Charm':
          charmInput.value = 1;
          charmIndicator.innerHTML = '1';
          break;
        case 'Cool':
          coolInput.value = 1;
          coolIndicator.innerHTML = '1';
          break;
        case 'Sharp':
          sharpInput.value = 1;
          sharpIndicator.innerHTML = '1';
          break;
        case 'Tough':
          toughInput.value = 1;
          toughIndicator.innerHTML = '1';
          break;
        case 'Technobabble':
          technobabbleInput.value = 1;
          technobabbleIndicator.innerHTML = '1';
          break;
        default:
          break;
      }

      switch (penaltyStat) {
        case 'Charm':
          charmInput.value = -1;
          charmIndicator.innerHTML = '-1';
          break;
        case 'Cool':
          coolInput.value = -1;
          coolIndicator.innerHTML = '-1';
          break;
        case 'Sharp':
          sharpInput.value = -1;
          sharpIndicator.innerHTML = '-1';
          break;
        case 'Tough':
          toughInput.value = -1;
          toughIndicator.innerHTML = '-1';
          break;
        case 'Technobabble':
          technobabbleInput.value = -1;
          technobabbleIndicator.innerHTML = '-1';
          break;
        default:
          break;
      }
    }
  };

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  document.addEventListener('click', (event) => {
    if (event.target.matches('[data-alter-stat]')) {
      const input = document.querySelector(`#${event.target.dataset.stat}`);
      const indicator = document.querySelector(`[data-${event.target.dataset.stat}]`);

      if (event.target.dataset.type === 'penalty') {
        input.value = Number(input.value) - 1;
        indicator.innerHTML = `${input.value}`;
      } else {
        input.value = Number(input.value) + 1;
        indicator.innerHTML = `${input.value}`;
      }
    }
  });

  document.addEventListener('submit', (event) => {
    event.preventDefault();
    if (event.target.matches('#finalizeStatsForm')) {
      if (!character || !character.key) {
        return;
      }

      character.charm = Number(event.target.elements.charm.value);
      character.cool = Number(event.target.elements.cool.value);
      character.sharp = Number(event.target.elements.sharp.value);
      character.tough = Number(event.target.elements.tough.value);
      character.technobabble = Number(event.target.elements.technobabble.value);
      updateCharacter(character);
    }
  });

  document.addEventListener('item-added', (event) => {
    const key = event.detail;
    window.location.href = `/character-sheets/character?key=${key}`;
  });

  getCharacter();
</script>
