---
title: Character
layout: layouts/sidebar.njk
---

<style>
  meter {
    --background: #dadada;
    --optimum: var(--green);
    --sub-optimum: var(--yellow);
    --sub-sub-optimum: var(--red);

    /* The gray background in Firefox */
    background: var(--background);
    display: block;
    margin-bottom: 1em;
    width: 100%;
    max-width: 40ch;
  }

  /* The gray background in Chrome, etc. */
  meter::-webkit-meter-bar {
    background: var(--background);
  }

  /* The green (optimum) bar in Firefox */
  meter:-moz-meter-optimum::-moz-meter-bar {
    background: var(--optimum);
  }

  /* The green (optimum) bar in Chrome etc. */
  meter::-webkit-meter-optimum-value {
    background: var(--optimum);
  }

  /* The yellow (sub-optimum) bar in Firefox */
  meter:-moz-meter-sub-optimum::-moz-meter-bar {
    background: var(--sub-optimum);
  }

  /* The yellow (sub-optimum) bar in Chrome etc. */
  meter::-webkit-meter-suboptimum-value {
    background: var(--sub-optimum);
  }

  /* The red (even less good) bar in Firefox */
  meter:-moz-meter-sub-sub-optimum::-moz-meter-bar {
    background: var(--sub-sub-optimum);
  }

  /* The red (even less good) bar in Chrome etc. */
  meter::-webkit-meter-even-less-good-value {
    background: var(--sub-sub-optimum);
  }

  .stat-bubble {
    display: inline-block;
    margin-inline-end: 0.5rem;
    border: 1px solid var(--text-color);
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    text-align: center;
    line-height: 1.5;
  }
</style>

<div class="stack">
  <div data-character-sheet class="stack"></div>

  <h3>Subclass</h3>
  {% for class in classes %}
    {% for subclass in class.subclasses %}
      <div data-subclass data-name="{{ subclass.Name }}" hidden>
        <div class="stack" style="--stack-space: 0.5rem">
          <h4>
            {{ subclass.Name }}
          </h4>
          <p class="small">
            {{ subclass.Description }}
          </p>
        </div>
      </div>
    {% endfor %}

    <h3 data-equipment data-class="{{ class.Name }}" hidden>Special Equipment</h3>
    {% for item in class.equipment %}
      <div data-equipment data-id="{{ item.id }}" data-class="{{ class.Name }}" hidden>
        <label class="custom-checkbox">
          <input id="equipment-{{ item.id }}" type="radio" name="special-equipment" value="{{ item.id }}">
          {% include "radio-svg.njk" %}
          <span>
            {{ item.Name }}
          </span>
        </label>
        <p class="small indented">
          {{ item.Description }}
        </p>
      </div>
    {% endfor %}
  {% endfor %}

  <h3>Weapons</h3>
  <div>
    <label class="custom-checkbox">
      <input id="toggleUnequippedWeapons" type="checkbox">
      {% include "checkbox-svg.njk" %}
      <span>
        Show Unequipped Weapons
      </span>
    </label>
  </div>
  {% for weapon in weapons %}
    <div data-weapon data-id="{{ weapon.id }}" data-stat="{{ weapon.Modifier }}" data-required-bonus="{{ weapon['Required Bonus'] }}" hidden>
      <label class="custom-checkbox">
        <input id="weapon-{{ weapon.id }}" type="checkbox" name="weapons" value="{{ weapon.id }}">
        {% include "checkbox-svg.njk" %}
        <span>
          {{ weapon.Name }}
        </span>
      </label>
      {% if weapon.Modifier %}
      <p class="small indented">
        +{{ weapon['Required Bonus'] }} {{ weapon.Modifier }}{% if weapon.Restrictions %}, {{ weapon.Restrictions }}{% endif %}
      </p>
      {% elseif weapon.Restrictions %}
      <p class="small indented">
        {{ weapon.Restrictions }}
      </p>
      {% endif %}
      <p class="indented">
        {{ weapon.Description }}
      </p>
      {% if weapon['Mixed Success Damage'] %}
        <div class="indented">
          <ul class="indented">
            <li>
              Mixed Success Damage: {{ weapon['Mixed Success Damage'] }}
            </li>
            <li>
              Success Damage: {{ weapon['Success Damage'] }}
            </li>
            <li>
              Critical Success Damage: {{ weapon['Critical Success Damage'] }}
            </li>
          </ul>
        </div>
      {% endif %}
    </div>
  {% endfor %}

  <h3>Armor</h3>
  {% for armor in armors %}
    <div data-armor data-id="{{ armor.id }}" data-stat="{{ armor.Modifier }}" data-required-bonus="{{ armor['Required Bonus'] }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ armor.Name }}
        </h4>
        {% if armor.Modifier %}
          <p>
            <small>
              +{{ armor['Required Bonus'] }} {{ armor.Modifier }}
            </small>
          </p>
        {% endif %}
        <p>
          {{ armor.Description }}
        </p>
      </div>
    </div>
  {% endfor %}

  <h3>Feats</h3>
  <div data-feat-links></div>
  {% for feat in allFeats %}
    <div data-feat data-id="{{ feat.id }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ feat.Name }}
        </h4>
        <p>
          <small>
            Level {{ feat.Level }}
          </small>
        </p>
        <p>
          {{ feat.Description }}
        </p>
      </div>
    </div>
  {% endfor %}

  <div class="cluster">
    <div>
      <div>
        <button type="button" data-export-character>
          Export Character
        </button>
      </div>
      <div>
        <button type="button" class="danger" data-delete-character>
          Delete Character
        </button>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { getFromDb, getAllFromDb, addToDb, deleteFromDb } from '/scripts/db.mjs';

  let character;
  let showUnequippedWeapons = false;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      window.location.href = '/character-sheets';
    }

    character = await getFromDb('characters', key);
    document.title = `${character.name} | Spacedoor`;

    const subclassElement = document.querySelectorAll('[data-subclass]');
    subclassElement.forEach((subclass) => {
      if (subclass.dataset.name === character.subclass) {
        subclass.removeAttribute('hidden');
      }
    });

    const equipment = document.querySelectorAll('[data-equipment]');
    equipment.forEach((item) => {
      if (item.dataset.class === character.class) {
        item.removeAttribute('hidden');
      }
    });

    const selectedEquipment = document.querySelector(`#equipment-${character.equipment}`);
    if (selectedEquipment) {
      selectedEquipment.checked = true;
    }

    if (!character.weapons?.length) {
      showUnequippedWeapons = true;
      const toggleWeaponsCheckbox = document.querySelector('#toggleUnequippedWeapons');
      toggleWeaponsCheckbox.checked = true;
    }

    const weapons = document.querySelectorAll('[data-weapon]');
    weapons.forEach((weapon) => {
      const id = weapon.dataset.id;
      if (character.weapons?.includes(id)) {
        weapon.removeAttribute('hidden');
        return;
      }

      if (!showUnequippedWeapons) {
        weapon.setAttribute('hidden', true);
        return;
      }

      if (!weapon.dataset.stat) {
        weapon.removeAttribute('hidden');
        return;
      }

      if (character[weapon.dataset.stat.toLowerCase()] >= Number(weapon.dataset.requiredBonus)) {
        weapon.removeAttribute('hidden');
      }
    });

    character.weapons?.forEach((weapon) => {
      const weaponCheckbox = document.querySelector(`#weapon-${weapon}`);
      if (weaponCheckbox) {
        weaponCheckbox.checked = true;
      }
    });

    const armors = document.querySelectorAll('[data-armor]');
    armors.forEach((armor) => {
      if (character[armor.dataset.stat.toLowerCase()] >= 3 && Number(armor.dataset.requiredBonus < 3)) {
        return;
      }

      if (character[armor.dataset.stat.toLowerCase()] >= Number(armor.dataset.requiredBonus)) {
        armor.removeAttribute('hidden');
      }
    });

    const characterSheetTemplate = `
      <h2>${character.name}</h2>
      <div class="cluster">
        <div>
          <a href="/character-sheets/add-character?key=${character.key}">
            Change Name
          </a>
          <a href="/character-sheets/select-race?key=${character.key}">
            Change Race
          </a>
          <a href="/character-sheets/select-class?key=${character.key}">
            Change Class
          </a>
          <a href="/character-sheets/select-subclass?key=${character.key}">
            Change Subclass
          </a>
          <a href="/character-sheets/edit-level?key=${character.key}">
            Edit Level
          </a>
        </div>
      </div>
      <div>
        <p>${character.race}</p>
        <p>${character.class}: ${character.subclass}</p>
        <p>Level ${character.level}</p>
      </div>
      <div>
        <a href="/character-sheets/edit-health-stamina?key=${character.key}&continue=true" data-level-up-link>Level Up</a>
      </div>
      <h3>Stats</h3>
      <div class="stack" style="--stack-space: 0.5rem">
        <p class="h4">
          <span class="stat-bubble">
            ${character.charm}
          </span>
          Charm
        </p>
        <p class="h4">
          <span class="stat-bubble">
            ${character.cool}
          </span>
          Cool
        </p>
        <p class="h4">
          <span class="stat-bubble">
            ${character.sharp}
          </span>
          Sharp
        </p>
        <p class="h4">
          <span class="stat-bubble">
            ${character.tough}
          </span>
          Tough
        </p>
        <p class="h4">
          <span class="stat-bubble">
            ${character.technobabble}
          </span>
          Technobabble
        </p>
      </div>
      <div>
        <a href="/character-sheets/finalize-stats?key=${character.key}">
          Edit Stats
        </a>
      </div>

      <h3>Health, Experience, and Luck</h3>
      <div class="stack">
        <div>
          <div>
            <label for="health">Health: ${character.currentHealth} / ${character.maxHealth}</label>
            <meter id="health" min="0" style="max-width: calc(${character.maxHealth / character.maxStamina} * 40ch)" max="${character.maxHealth}" low="${Math.ceil(character.maxHealth / 3)}" high="${Math.ceil(character.maxHealth * 2 / 3)}" optimum="${character.maxHealth}" value="${character.currentHealth}"></meter>
          </div>
          <div>
            <label for="stamina">Stamina: ${character.currentStamina} / ${character.maxStamina}</label>
            <meter id="stamina" min="0" max="${character.maxStamina}" low="${Math.ceil(character.maxStamina / 3)}" high="${Math.ceil(character.maxStamina * 2 / 3)}" optimum="${character.maxStamina}" value="${character.currentStamina}"></meter>
          </div>
          <div>
            <a href="/character-sheets/edit-health-stamina?key=${character.key}">
              Edit Health & Stamina
            </a>
          </div>
        </div>
        <div class="stack">
          <div>
            <form id="takeDamageForm" class="stack" style="--stack-space: 0.5rem">
              <label for="damage">Damage</label>
              <div class="cluster">
                <div>
                  <input id="damage" type="text" name="damage" pattern="^[0-9]+$" inputmode="numeric" autocomplete="off" autofill="false" style="max-width: 6ch">
                  <button type="submit" class="small">
                    Take Damage
                  </button>
                </div>
              </div>
            </form>
          </div>
          <div>
            <form id="gainStaminaForm" class="stack" style="--stack-space: 0.5rem">
              <label for="gainStamina">Stamina</label>
              <div class="cluster">
                <div>
                  <input id="gainStamina" type="text" name="gain-stamina" pattern="^[0-9]+$" inputmode="numeric" autocomplete="off" autofill="false" style="max-width: 6ch">
                  <button type="submit" class="small">
                    Gain Stamina
                  </button>
                </div>
              </div>
            </form>
          </div>
          <div>
            <form id="gainHealthForm" class="stack" style="--stack-space: 0.5rem">
              <label for="gainHealth">Health</label>
              <div class="cluster">
                <div>
                  <input id="gainHealth" type="text" name="gain-health" pattern="^[0-9]+$" inputmode="numeric" autocomplete="off" autofill="false" style="max-width: 6ch">
                  <button type="submit" class="small">
                    Gain Health
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div>
        <fieldset>
          <legend id="experienceLabel">Experience</legend>
          <div class="cluster">
            <div style="--cluster-space: 0.5em">
              ${Array.apply(null, Array(5)).map((a, index) => {
                return `
                  <label class="custom-checkbox">
                    <input type="checkbox" aria-describedby="experienceLabel" data-toggle-experience${index < character.experience ? ' checked' : ''}>
                    {% include "checkbox-svg.njk" %}
                  </label>
                `;
              }).join('')}
            </div>
          </div>
        </fieldset>
      </div>
      ${character.experience === 5 ? `<div><a href="/character-sheets/edit-health-stamina?key=${character.key}&continue=true" data-level-up-link>Level Up!</a></div>`: ''}
      <div>
        <fieldset>
          <legend id="luckLabel">Luck Points</legend>
          <div class="cluster">
            <div style="--cluster-space: 0.5em">
              ${Array.apply(null, Array(7)).map((a, index) => {
                return `
                <label class="custom-checkbox">
                  <input type="checkbox" aria-describedby="luckLabel" data-toggle-luck${index < (7 - character.luck) ? ' checked' : ''}>
                  {% include "checkbox-svg.njk" %}
                </label>
                `;
              }).join('')}
            </div>
          </div>
        </fieldset>
      </div>
    `;

    const sheetElement = document.querySelector(`[data-character-sheet]`);
    sheetElement.innerHTML = characterSheetTemplate;

    const featLinksTemplate = `
      <a href="/character-sheets/select-feats?key=${character.key}">Select Feats</a>
    `;

    const featLinksElement = document.querySelector('[data-feat-links]');
    featLinksElement.innerHTML = featLinksTemplate;

    const feats = document.querySelectorAll('[data-feat]');
    feats.forEach((feat) => {
      if (character.feats && character.feats.length && character.feats.includes(feat.dataset.id)) {
        feat.removeAttribute('hidden');
      }
    });
  };

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-level-up-link]')) {
      event.preventDefault();
      character.level += 1;
      character.experience = 0;
      await updateCharacter(character);
      window.location.href = event.target.href;
    }

    if (event.target.matches('[data-delete-character]')) {
      try {
        await deleteFromDb('characters', character.key);
      } catch (error) {
        console.error(error);
      }
    }

    if (event.target.matches('[data-export-character]')) {
      const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(character, null, 2))}`;
      const anchor = document.createElement('a');
      anchor.setAttribute('href', dataStr);
      anchor.setAttribute('download', `${character.name.toLowerCase().replace(/\s/g, '-')}.json`);
      document.body.appendChild(anchor);
      anchor.click();
      anchor.remove();
    }
  });

  document.addEventListener('submit', (event) => {
    event.preventDefault();
    if (event.target.matches('#takeDamageForm')) {
      const damage = Number(event.target.elements.damage.value);
      const remainder = character.currentStamina - damage;

      if (remainder < 0) {
        character.currentStamina = 0;
        character.currentHealth += remainder;

        if (character.currentHealth <= 0) {
          character.currentHealth = 0;
        }
      } else {
        character.currentStamina -= damage;
      }

      updateCharacter(character);
    }

    if (event.target.matches('#gainStaminaForm')) {
      const stamina = Number(event.target.elements['gain-stamina'].value);

      character.currentStamina += stamina;
      if (character.currentStamina > character.maxStamina) {
        character.currentStamina = character.maxStamina;
      }

      updateCharacter(character);
    }

    if (event.target.matches('#gainHealthForm')) {
      const health = Number(event.target.elements['gain-health'].value);
      const overage = character.currentHealth + health - character.maxHealth;

      if (overage > 0) {
        character.currentHealth = character.maxHealth;

        character.currentStamina += overage;
        if (character.currentStamina > character.maxStamina) {
          character.currentStamina = character.maxStamina;
        }
      } else {
        character.currentHealth += health;
      }

      updateCharacter(character);
    }
  });

  document.addEventListener('change', (event) => {
    if (event.target.matches('[data-toggle-experience]')) {
      if (event.target.checked) {
        character.experience += 1;
      } else {
        character.experience -= 1;
      }

      if (character.experience > 5) {
        character.experience = 5;
      }

      if (character.experience < 0) {
        character.experience = 0;
      }

      updateCharacter(character);
    }

    if (event.target.matches('[data-toggle-luck]')) {
      if (event.target.checked) {
        character.luck -= 1;
      } else {
        character.luck += 1;
      }

      if (character.luck > 7) {
        character.luck = 7;
      }

      if (character.luck < 0) {
        character.luck = 0;
      }

      updateCharacter(character);
    }

    if (event.target.matches('[name="special-equipment"]')) {
      character.equipment = event.target.value;

      updateCharacter(character);
    }

    if (event.target.matches('[name="weapons"]')) {
      if (event.target.checked) {
        if (character.weapons) {
          character.weapons.push(event.target.value);
        } else {
          character.weapons = [event.target.value];
        }
      } else {
        const index = character.weapons?.findIndex((id) => id === event.target.value);
        if (index > -1) {
          character.weapons.splice(index, 1);
        }
      }

      updateCharacter(character);
    }

    if (event.target.matches('#toggleUnequippedWeapons')) {
      showUnequippedWeapons = !showUnequippedWeapons;
      getCharacter();
    }
  });

  document.addEventListener('item-added', () => {
    getCharacter();
  });

  document.addEventListener('item-deleted', () => {
    window.location.href = '/character-sheets';
  });

  getCharacter();
</script>
