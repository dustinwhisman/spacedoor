---
title: Character
layout: layouts/sidebar.njk
---

<style>
  meter {
    --background: #dadada;
    --optimum: forestgreen;
    --sub-optimum: gold;
    --sub-sub-optimum: crimson;

    /* The gray background in Firefox */
    background: var(--background);
    display: block;
    margin-bottom: 1em;
    width: 100%;
    max-width: 40ch;
  }

  /* The gray background in Chrome, etc. */
  meter::-webkit-meter-bar {
    background: var(--background);
  }

  /* The green (optimum) bar in Firefox */
  meter:-moz-meter-optimum::-moz-meter-bar {
    background: var(--optimum);
  }

  /* The green (optimum) bar in Chrome etc. */
  meter::-webkit-meter-optimum-value {
    background: var(--optimum);
  }

  /* The yellow (sub-optimum) bar in Firefox */
  meter:-moz-meter-sub-optimum::-moz-meter-bar {
    background: var(--sub-optimum);
  }

  /* The yellow (sub-optimum) bar in Chrome etc. */
  meter::-webkit-meter-suboptimum-value {
    background: var(--sub-optimum);
  }

  /* The red (even less good) bar in Firefox */
  meter:-moz-meter-sub-sub-optimum::-moz-meter-bar {
    background: var(--sub-sub-optimum);
  }

  /* The red (even less good) bar in Chrome etc. */
  meter::-webkit-meter-even-less-good-value {
    background: var(--sub-sub-optimum);
  }
</style>

<div class="stack">
  <div data-character-sheet class="stack"></div>

  <h3>Subclass and Special Equipment</h3>
  <div data-change-equipment></div>
  {% for class in classes %}
    {% for subclass in class.subclasses %}
      <div data-subclass data-name="{{ subclass.Name }}" hidden>
        <div class="stack" style="--stack-space: 0.5rem">
          <h4>
            {{ subclass.Name }}
          </h4>
          <p>
            {{ subclass.Description }}
          </p>
        </div>
      </div>
    {% endfor %}
    {% for item in class.equipment %}
      <div class="stack" data-equipment data-id="{{ item.id }}" hidden>
        <div class="stack" style="--stack-space: 0.5rem">
          <h4>
            {{ item.Name }}
          </h4>
          <p>
            {{ item.Description }}
          </p>
        </div>
      </div>
    {% endfor %}
  {% endfor %}

  <h3>Weapons</h3>
  <div data-change-weapons></div>
  {% for weapon in weapons %}
    <div data-weapon data-id="{{ weapon.id }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ weapon.Name }}
        </h4>
        {% if weapon.Modifier %}
          <p>
            <small>
              +{{ weapon['Required Bonus'] }} {{ weapon.Modifier }}{% if weapon.Restrictions %}, {{ weapon.Restrictions }}{% endif %}
            </small>
          </p>
        {% endif %}
        <p>
          {{ weapon.Description }}
        </p>
        {% if weapon['Mixed Success Damage'] %}
          <ul>
            <li>
              Mixed Success Damage: {{ weapon['Mixed Success Damage'] }}
            </li>
            <li>
              Success Damage: {{ weapon['Success Damage'] }}
            </li>
            <li>
              Critical Success Damage: {{ weapon['Critical Success Damage'] }}
            </li>
          </ul>
        {% endif %}
      </div>
    </div>
  {% endfor %}

  <h3>Armor</h3>
  <div data-change-armor></div>
  {% for armor in armors %}
    <div data-armor data-id="{{ armor.id }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ armor.Name }}
        </h4>
        {% if armor.Modifier %}
          <p>
            <small>
              +{{ armor['Required Bonus'] }} {{ armor.Modifier }}
            </small>
          </p>
        {% endif %}
        <p>
          {{ armor.Description }}
        </p>
      </div>
    </div>
  {% endfor %}

  <h3>Feats</h3>
  <div class="cluster">
    <div data-feat-links></div>
  </div>
  {% for feat in allFeats %}
    <div data-feat data-id="{{ feat.id }}" hidden>
      <div class="stack" style="--stack-space: 0.5rem">
        <h4>
          {{ feat.Name }}
        </h4>
        <p>
          <small>
            Level {{ feat.Level }}
          </small>
        </p>
        <p>
          {{ feat.Description }}
        </p>
      </div>
    </div>
  {% endfor %}
</div>

<script type="module">
  import { getFromDb, getAllFromDb, addToDb } from '/scripts/db.mjs';

  let character;
  const getCharacter = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const key = urlParams.has('key') && urlParams.get('key');

    if (!key) {
      window.location.href = '/character-sheets';
    }

    character = await getFromDb('characters', key);
    document.title = `${character.name} | Spacedoor`;

    const changeEquipmentElement = document.querySelector('[data-change-equipment]');
    changeEquipmentElement.innerHTML = `<a href="/classes/${character.class.toLowerCase().replace(/\s/g, '-')}?key=${character.key}">Change Equipment</a>`;

    const subclassElement = document.querySelectorAll('[data-subclass]');
    subclassElement.forEach((subclass) => {
      if (subclass.dataset.name === character.subclass) {
        subclass.removeAttribute('hidden');
      }
    });

    const equipment = document.querySelectorAll('[data-equipment]');
    equipment.forEach((item) => {
      if (item.dataset.id === character.equipment) {
        item.removeAttribute('hidden');
      }
    });

    const changeWeaponsElement = document.querySelector('[data-change-weapons]');
    changeWeaponsElement.innerHTML = `<a href="/weapons?key=${character.key}">Change Weapons</a>`;

    const weapons = document.querySelectorAll('[data-weapon]');
    weapons.forEach((weapon) => {
      if (character.weapons && character.weapons.length && character.weapons.includes(weapon.dataset.id)) {
        weapon.removeAttribute('hidden');
      }
    });

    const changeArmorElement = document.querySelector('[data-change-armor]');
    changeArmorElement.innerHTML = `<a href="/armor?key=${character.key}">Change Armor</a>`;

    const armors = document.querySelectorAll('[data-armor]');
    armors.forEach((armor) => {
      if (character.armors && character.armors.length && character.armors.includes(armor.dataset.id)) {
        armor.removeAttribute('hidden');
      }
    });

    const characterSheetTemplate = `
      <h2>${character.name}</h2>
      <div>
        <p>${character.race}</p>
        <p>${character.class}: ${character.subclass}</p>
        <p>Level ${character.level}</p>
        <a href="/character-sheets/level-up?key=${character.key}" data-level-up-link>Level Up</a>
      </div>
      <div>
        <p>Charm: ${character.charm}</p>
        <p>Cool: ${character.cool}</p>
        <p>Sharp: ${character.sharp}</p>
        <p>Tough: ${character.tough}</p>
        <p>Technobabble: ${character.technobabble}</p>
      </div>
      <div>
        <div>
          <label for="health">Health: ${character.currentHealth} / ${character.maxHealth}</label>
          <meter id="health" min="0" style="max-width: calc(${character.maxHealth / character.maxStamina} * 40ch)" max="${character.maxHealth}" low="${Math.ceil(character.maxHealth / 3)}" high="${Math.ceil(character.maxHealth * 2 / 3)}" optimum="${character.maxHealth}" value="${character.currentHealth}"></meter>
        </div>
        <div>
          <label for="stamina">Stamina: ${character.currentStamina} / ${character.maxStamina}</label>
          <meter id="stamina" min="0" max="${character.maxStamina}" low="${Math.ceil(character.maxStamina / 3)}" high="${Math.ceil(character.maxStamina * 2 / 3)}" optimum="${character.maxStamina}" value="${character.currentStamina}"></meter>
        </div>
      </div>
      <div>
        <p>Experience: ${character.experience}</p>
        <p>Luck Points: ${character.luck}</p>
      </div>
    `;

    const sheetElement = document.querySelector(`[data-character-sheet]`);
    sheetElement.innerHTML = characterSheetTemplate;

    const featLinksTemplate = `
      <div>
        <a href="/races/${character.race.toLowerCase().replace(/\s/g, '-')}?key=${character.key}">Add Race Feats</a>
      </div>
      <div>
        <a href="/classes/${character.class.toLowerCase().replace(/\s/g, '-')}?key=${character.key}">Add Class Feats</a>
      </div>
      <div>
        <a href="/feats?key=${character.key}">Add General Feats</a>
      </div>
    `;

    const featLinksElement = document.querySelector('[data-feat-links]');
    featLinksElement.innerHTML = featLinksTemplate;

    const feats = document.querySelectorAll('[data-feat]');
    feats.forEach((feat) => {
      if (character.feats && character.feats.length && character.feats.includes(feat.dataset.id)) {
        feat.removeAttribute('hidden');
      }
    });
  };

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-level-up-link]')) {
      event.preventDefault();
      // increment level, then navigate
      character.level += 1;
      await updateCharacter(character);
      window.location.href = event.target.href;
    }
  });

  const updateCharacter = async (character) => {
    try {
      await addToDb('characters', character);
    } catch (error) {
      console.error(error);
    }
  };

  getCharacter();
</script>
