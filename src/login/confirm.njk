---
title: Confirm Login
layout: layouts/sidebar.njk
---

<div class="stack">
  <h2>
    Confirm Login
  </h2>

  <div class="stack" data-status-update aria-live="polite">
    <p>
      Hang on a moment while we confirm your login.
    </p>
    <p>
      If you created characters before logging in, those will be saved to the
      cloud automatically.
    </p>
  </div>

  <div class="stack" data-different-device hidden>
    <p>
      It appears you opened this link on a different device than the one you
      originally wanted to log in with. We will need to confirm your email
      address before logging you in on this device. If you want to log in on
      your original device, close this tab and open the link on that device.
    </p>
    <form class="stack" data-confirm-email-form>
      <div>
        <label for="email">
          Email
        </label>
        <input id="email" type="email" inputmode="email" autocapitalize="off" name="email">
      </div>
      <div>
        <button type="submit">
          Confirm Email
        </button>
      </div>
    </form>
  </div>

  <div data-login-error hidden>
    <p>
      We were unable to log you in. Either your email was invalid or the login
      link was invalid or had expired.
    </p>
  </div>
</div>

<script type="module">
  import { getAllFromDb, addToDb } from '/scripts/db.mjs';

  let characterLength = 0;
  (async () => {
    if (firebase.auth().isSignInWithEmailLink(window.location.href)) {
      const email = localStorage.getItem('emailForSignIn');
      if (!email) {
        const differentDeviceBlock = document.querySelector('[data-different-device]');
        differentDeviceBlock.removeAttribute('hidden');
        return;
      }

      firebase.auth().signInWithEmailLink(email, window.location.href)
        .then(async () => {
          const characters = await getAllFromDb('characters');
          characterLength = characters.length;
          characters.forEach((character) => {
            addToDb('characters', character);
          });
        })
        .catch((error) => {
          const errorMessage = document.querySelector('[data-login-error]');
          errorMessage.removeAttribute('hidden');
        });
    }
  })();

  document.addEventListener('submit', (event) => {
    event.preventDefault();

    if (event.target.matches('[data-confirm-email-form]')) {
      if (firebase.auth().isSignInWithEmailLink(window.location.href)) {
        const email = event.target.elements.email.value;

        firebase.auth().signInWithEmailLink(email, window.location.href)
          .then(async () => {
            const characters = await getAllFromDb('characters');
            characterLength = characters.length;
            characters.forEach((character) => {
              addToDb('characters', character);
            });
          })
          .catch((error) => {
            const errorMessage = document.querySelector('[data-login-error]');
            errorMessage.removeAttribute('hidden');
          });
      }
    }
  });

  document.addEventListener('item-added', () => {
    characterLength -= 1;
    console.log(characterLength);

    if (characterLength <= 0) {
      localStorage.removeItem('emailForSignIn');
      window.location.href = '/';
    }
  });
</script>
